// <auto-generated />
using Cartalog.Data.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Cartalog.Data.Migrations
{
    /// <summary>
    /// Class Initial.
    /// Implements the <see cref="Migration" />
    /// </summary>
    /// <seealso cref="Migration" />
    [DbContext(typeof(CartalogDbContext))]
    [Migration("20220505191516_Initial")]
    partial class Initial
    {
        /// <summary>
        /// Builds the target model.
        /// </summary>
        /// <param name="modelBuilder">The model builder.</param>
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cartalog.Data.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("GameId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<Guid>("TuneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TuneId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Maximum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Minimum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.SurfaceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("SurfaceTypes");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Tune", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RouteId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("GameId");

                    b.HasIndex("RouteId");

                    b.ToTable("Tunes");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.TuneSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SettingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TuneId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.HasIndex("TuneId");

                    b.ToTable("TuneSettings");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.TuneUpgrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TuneId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpgradeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TuneId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("TuneUpgrades");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Upgrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Upgrades");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Car", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cartalog.Data.Entities.Game", null)
                        .WithMany("Cars")
                        .HasForeignKey("GameId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Platform", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Game", null)
                        .WithMany("Platforms")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Record", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cartalog.Data.Entities.Tune", "Tune")
                        .WithMany()
                        .HasForeignKey("TuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Tune");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Route", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Game", null)
                        .WithMany("Routes")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.SurfaceType", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Route", null)
                        .WithMany("SurfaceTypes")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Tune", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cartalog.Data.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cartalog.Data.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Game");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.TuneSetting", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cartalog.Data.Entities.Tune", null)
                        .WithMany("Settings")
                        .HasForeignKey("TuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.TuneUpgrade", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Tune", null)
                        .WithMany("Upgrades")
                        .HasForeignKey("TuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cartalog.Data.Entities.Upgrade", "Upgrade")
                        .WithMany()
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Upgrade", b =>
                {
                    b.HasOne("Cartalog.Data.Entities.Game", null)
                        .WithMany("Upgrades")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Game", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Platforms");

                    b.Navigation("Routes");

                    b.Navigation("Upgrades");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Route", b =>
                {
                    b.Navigation("SurfaceTypes");
                });

            modelBuilder.Entity("Cartalog.Data.Entities.Tune", b =>
                {
                    b.Navigation("Settings");

                    b.Navigation("Upgrades");
                });
#pragma warning restore 612, 618
        }
    }
}
